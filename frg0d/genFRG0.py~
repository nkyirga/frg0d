from frgFlow import fRG0D
from propG import scaleProp
from vertexF import vertexR
from tempfile import TemporaryFile
import numpy as np
import argparse

parser = argparse.ArgumentParser(description='fRG flow for SIAM')
parser.add_argument('nPatches',metavar='Nf',type=int,
                   help='resolution of frequency axis')
parser.add_argument('step',metavar='dl',type=float,
                    help='initial step')
parser.add_argument('beTa',metavar='T',type=float,nargs=2,
                    help='Inverse temperature')
parser.add_argument('wMax',metavar='A',type=float,
                    help='Initial scale of flow')
parser.add_argument('NW',metavar='NW',type=int,
                    help='Order of expansion for non singular contributions')
parser.add_argument('couplingU',metavar='U',type=float,nargs=2,
                    help='strength of couloumb interaction at impurity site')
parser.add_argument('cutoffR',metavar='R(A)',type=str,
                    help='type of regulator for flow: Litim,Additive,...')
parser.add_argument('nLoop',metavar='nL',type=int,
                    help='number of loops')
parser.add_argument('Mu',metavar='Mu',type=float,nargs=2,
                    help='chemical potential')

args = parser.parse_args()

def hF(wM):
    return 1j*(np.sign(wM))

def uF(wPP,wPH,wPHE):
    return args.couplingU[0]+np.zeros(wPP.shape)

wMin=(np.pi)/args.beTa[0]
lMax=-np.log(wMin/args.wMax)

fRGrun=fRG0D(args.nPatches,args.step,args.beTa[0],args.wMax,args.NW,args.cutoffR)
fRGrun.initializeFlow(hF,uF,args.nLoop,args.Mu[0])

fRGrun.adaptiveRGFlow(lMax)
(c,s)=fRGrun.susFunctions()
gamma0=fRGrun.UnF.uEvaluate(0*fRGrun.propG.wF[0],np.zeros(1),np.zeros(1),0.00)
wFI=fRGrun.propG.wF[0:2]
wFI=np.append(-wFI[::-1],wFI)
sEI=fRGrun.propG.sE[0:2]
sEI=np.append(np.conj(sEI[::-1]),sEI)
sEd=np.polyfit(wFI,sEI.imag,2)[1]

cX=(1/np.pi)*(1-sEd-gamma0/np.pi)
xx=np.linspace(0,100,100000)
uU=args.couplingU[0]
xxI=(np.exp(-xx**2/(2.0*uU/np.pi))*np.cos(np.pi*xx/2.0))/(1.0-xx**2)
cSexact=np.trapz(xxI,xx)*np.exp(np.pi*uU/8.0)*(1/np.pi)*np.sqrt(2.0/uU)
cS=(1/np.pi)*(1-sEd+gamma0/np.pi)
xxI=(np.exp(-xx**2/(2.0*uU/np.pi))*np.cosh(np.pi*xx/2.0))/(1.0+xx**2)
cXexact=np.trapz(xxI,xx)*np.exp(-np.pi*uU/8.0)*(1/np.pi)*np.sqrt(2.0/uU)

print cX,cXexact,cS,cSexact
print 1-sEd,(np.pi/2.0)*(cXexact+cSexact)
print gamma0,(np.pi**2/2.0)*(cSexact-cXexact)
print c[0],s[0],cXexact,cSexact
filename=''.join(['couplingU',str(int(args.couplingU[1])),'Mu',str(int(args.Mu[1])),'R',args.cutoffR,
                  'SIAMnL',str(args.nLoop),'nf',str(args.nPatches),'NW',str(args.NW),'bT',str(int(args.beTa[1]))])
np.savez(filename,xC=c,xS=s,wB=fRGrun.UnF.wB,wF=fRGrun.propG.wF,sE=fRGrun.propG.sE,lM=fRGrun.l,\
             bT=args.beTa[0],uU=args.couplingU[0],g00=gamma0,gPP=fRGrun.UnF.UnPP[0,:,:],gPH=fRGrun.UnF.UnPH[0,:,:],
             gPHE=fRGrun.UnF.UnPHE[0,:,:])

