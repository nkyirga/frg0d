from frgFlow import fRG0D
from propG import scaleProp
from vertexF import vertexR
import auxFunctions as auxF
from auxFunctions import freqPoints
from auxFunctions import gaussianInt
from auxFunctions import padeWeights
from auxFunctions import calcScale
import numpy as np
from matplotlib import pyplot as plt

def hF(wM):
    return 1j*(np.sign(wM))

def uF(wPP,wPH,wPHE):
    return 6.0


beTa=50.0
maxW=100
nPatches=20
wF,wFG=auxF.padeWeights(maxW,beTa)

wFX=np.append(-wF[::-1],wF)
wFG=np.append(wFG[::-1],wFG)
        
a,wB=auxF.freqPoints(beTa,maxW,nPatches)

wBE=np.append(-wB[:0:-1],wB)
wBe=wBE[:]
def slitim(wQ,AC):
    freeG=1j*np.sign(wQ)
        
    regL=auxF.litim0(wQ,AC)
    dLitim=auxF.dLitim0(wQ,AC)
        
    return -dLitim/((1j*wQ+freeG+regL)**2)
    
def gLitim(wQ,AC):
    freeG=1j*np.sign(wQ)
        
    regL=auxF.litim0(wQ,AC)

    return 1/(1j*wQ+freeG+regL)
    
deltaL=0.1
NW=20

wBX=2*np.arange(-600,601)*(np.pi/beTa)
wBXX,wBGG=auxF.gaussianInt(wBE,4)

gPPo=np.zeros(len(wBE),dtype=np.complex_)
for j in range(len(wBE)):
    gPPo[j]=(1/beTa)*np.sum(wFG*gLitim(wFX,0)*gLitim(wBE[j]-wFX,0))
plt.plot(wBE,gPPo.real)
plt.show()
zFX,zFG=auxF.gaussianInt([-1,1],30)
cScale=1.0
wFv=auxF.backMap(zFX,cScale)
gPPE=np.interp(wFv,wBE,gPPo.real)
hSeries=np.zeros(NW,dtype=np.complex_)
hTest=np.zeros(len(wBE),dtype=np.complex_)
for i in range(NW):
    hSeries[i]=np.sum(zFG*auxF.freqExpansion(zFX,i)*gPPE)
    plt.plot(wBE,gPPo,'o-')
    plt.plot(wBE,hTest)
    hTest+=hSeries[i]*auxF.freqExpansion(auxF.forMap(wBE,cScale),i)
    plt.plot(wBE,hTest)
    plt.show()

uInt=3
uPPl=np.zeros((len(wBE),100),dtype=np.complex_)
bEPPl=np.zeros((len(wBE),100),dtype=np.complex_)
besselN=np.zeros(NW,dtype=np.complex_)
ACl=np.zeros(100)
for i in range(1,100):
    AC=maxW*np.exp(-deltaL*i)
    ACl[i]=AC
    gPP=np.zeros(len(wBE))
    for j in range(len(wBE)):
        gPP[j]=(2/beTa)*np.sum(wFG*slitim(wFX,AC)*gLitim(wBE[j]-wFX,AC))

    uPPl[:,i]=uPPl[:,i-1]-deltaL*AC*(uInt+uPPl[:,i-1])*gPP*(uInt+uPPl[:,i-1])

    beTaA=beTa/((AC**8+1)**(1.0/8.0))
    nMax=np.round((0.5*maxW*beTaA)/np.pi)
    wBX=(2*np.arange(-nMax,nMax+1))*(np.pi/beTaA)
    uPPE=np.zeros(len(wBX),dtype=np.complex_)

    gPPE=np.interp(wBX,wBE,uPPl[:,i].real)+0*1j
    gPPE+=1j*np.interp(wBX,wBE,uPPl[:,i].imag)
    
    bTemp=np.zeros(len(wBE),dtype=np.complex_)
    zN=np.zeros(NW)
    zN[:9]=1
    bTemp2=np.zeros(len(wBX),dtype=np.complex_)
    
    for j in range(NW):
        term2=np.sum(auxF.besselExpansion(-wBX*beTaA,j)*gPPE)
        besselN[j]=term2
        bTemp2+=zN[j]*besselN[j]*auxF.besselExpansion(wBX*beTaA,j)
        bTemp+=zN[j]*besselN[j]*np.interp(wBE,wBX,auxF.besselExpansion(wBX*beTaA,j).real)
        bTemp+=zN[j]*besselN[j]*np.interp(wBE,wBX,auxF.besselExpansion(wBX*beTaA,j).imag)
    
    bEPPl[:,i]=bTemp
    #bEPPl[:,i]=np.interp(wBE,wBX,bTemp2.real)
    #bEPPl[:,i]+=1j*np.interp(wBE,wBX,bTemp2.imag)

wFX=np.pi*(2*np.arange(-50,50)+1)
wFXE=np.tile(wFX[:,np.newaxis],(1,len(wB)))
wF1=np.tile(wFX[:,np.newaxis,np.newaxis],(1,len(wFX),len(wB)))
wF2=np.tile(wFX[np.newaxis,:,np.newaxis],(len(wFX),1,len(wB)))
wBE=np.tile(wB[np.newaxis,np.newaxis,:],(len(wFX),len(wFX),1))
uInt=np.zeros((len(wFX),len(wB),10),dtype=np.complex_)
UnPHEX=np.zeros((NW,len(wB),10,10),dtype=np.complex_)
for m in range(NW):
    for j in range(10):
        uInt[:,:,j]=np.sum(besselN[m]*auxF.besselExpansion(-(wBE*beTa-wF2-wF1),m)*auxF.besselExpansion(wF1,j),axis=0)
    for k in range(10):
        UnPHEX[m,:,:,k]=np.sum(uInt*np.tile(auxF.besselExpansion(-wFXE,k)[:,:,np.newaxis],(1,1,10)),axis=0)
UnPHEx=np.sum(UnPHEX,axis=0)

plt.plot(wBe,uPPl[:,-1].real,'.-')
for i in range(10):
    for j in range(10):
        print i,j
        plt.plot(wB,UnPHEx[:,i,j].real)
        plt.plot(wB,UnPHEx[:,i,j].imag)

        plt.show()
print ACl[10],ACl[40],ACl[90]
plt.style.use('seaborn-paper')

plt.plot(np.arange(0,NW,2),besselN[::2],'-o',label='$\Pi_n^{\Lambda=0}$',color='darkorchid')
plt.plot(np.arange(1,NW,2),besselN[1::2],'o',color='red')
plt.legend(loc='upper right',shadow=False)
plt.xlabel('$N_\omega$')
plt.ylabel('$\Pi_n$')
plt.savefig('uPPN.eps',format='eps',dpi=1200)

fg,ax=plt.subplots(nrows=3,sharex='col')

fg.subplots_adjust(hspace=0.08)
l1=ax[0].plot(wBE,uPPl[:,10],label='$\Pi^{\Lambda=36\Delta}$',linewidth=1.0,color='royalblue')
l2=ax[0].plot(wBE,bEPPl[:,10],'o-',markersize=5,label='$\omega_\Lambda=36\omega$',linewidth=1.0,color='purple')

l1=ax[1].plot(wBE,uPPl[:,40],label='$\Pi^{\Lambda=1.8\Delta}$',linewidth=1.0,color='royalblue')
l2=ax[1].plot(wBE,bEPPl[:,40],'s-',markersize=5,label='$\omega_\Lambda=2.2\omega$',linewidth=1.0,color='darkgreen')


l1=ax[2].plot(wBE,uPPl[:,90],label='$\Pi^{\Lambda=0.012\Delta}$',linewidth=1.0,color='royalblue')
l2=ax[2].plot(wBE,bEPPl[:,90],'.-',markersize=5,label='$\omega_\Lambda=\omega$',linewidth=1.0,color='deepskyblue')

ax[2].set_xlabel('$\omega$')
ax[0].set_ylabel('$\Pi^\Lambda(\omega)$')
ax[1].set_ylabel('$\Pi^\Lambda(\omega)$')
ax[2].set_ylabel('$\Pi^\Lambda(\omega)$')
ax[0].legend(loc='upper right',shadow=False,frameon=True)
ax[1].legend(loc='upper right',shadow=False,frameon=True)
ax[2].legend(loc='upper right',shadow=False,frameon=True)
plt.savefig('uPPLambda.eps',format='eps',dpi=1200)

besselTest=np.zeros(30,dtype=np.complex_)
bTest=np.zeros(len(wBE),dtype=np.complex_)

gPP=np.zeros(len(wBE),dtype=np.complex_)
for i in range(len(wBE)):
    gPP[i]=np.sum(wFG*(1/((1j*wFX+hF(wFX))*(1j*(wBE[i]-wFX)+hF(wBE[i]-wFX)))))

(zFull,b)=auxF.gaussianInt([-1,1],10)
tFull=(beTa/2)*(zFull+1)
print tFull

xMin=-np.log(0.01/(beTa-0.01))
xL=np.linspace(-xMin,xMin,20)
tFull=np.unique(np.append(tFull,beTa*np.exp(xL)/(1+np.exp(xL))))
(tFX,tFG)=auxF.gaussianInt(tFull,2)

wFE=2*np.arange(-200,201)*(np.pi/beTa)
gTT=np.zeros(len(tFX),dtype=np.complex_)
gPPE=np.interp(wFE,wBE,gPP.real)

l=np.linspace(0,10,20)
Al=(np.max(wFE)/5)*np.exp(-l)
fTT=np.zeros((len(tFX),20),dtype=np.complex_)
for i in range(len(tFX)):
    for j in range(20):
        fTT[i,j]=(1/beTa)*np.sum(np.exp(1j*wFE*tFX[i])*((wFE**2)/(wFE**2+Al[j]**2)))
    gTT[i]=(1/beTa)*np.sum(np.exp(1j*wFE*tFX[i])*gPPE)

for j in range(20):
    plt.plot(tFX,fTT[:,j])
    plt.show()

for i in range(30):
    besselTest[i]=(1/beTa)*np.sum(gPPE*np.sqrt(beTa)*auxF.besselExpansion(wFE*beTa,i))
    bTest+=besselTest[i]*np.sqrt(beTa)*auxF.besselExpansion(-wBE*beTa,i)
plt.plot(besselTest,'o')
plt.show()
plt.plot(wBE,bTest.real,'-o')
plt.plot(wBE,bTest.imag,'-.')
plt.plot(wBE,gPP)
plt.show()

gExpand=np.interp(zFX/np.sqrt(1-zFX**2),wBE,gPP.real)
plt.plot(zFX/np.sqrt(1-zFX**2),gExpand)
plt.show()
lCoeff=np.zeros(20)
gTest=np.zeros(len(zFX))
for i in range(20):
    print i
    lCoeff[i]=np.sum(zFG*gExpand*auxF.freqExpansion(zFX,i))
    gTest+=auxF.freqExpansion(zFX,i)*lCoeff[i]
    plt.plot(zFX/np.sqrt(1-zFX**2),gTest)
    plt.plot(wBE,gPP,'o-')
    plt.show()
"""
tMin=0.01
NW=10
xM=-np.log(tMin/(beTa-tMin))
zI=np.linspace(-xM,xM,NW)
tVals=beTa*(np.exp(zI)/(1+np.exp(zI)))
zVals=np.log(tVals/(beTa-tVals))
plt.plot(tVals,np.exp(-0.5*(zVals**2)),'.-')
plt.show()
zT=zVals[1]-zVals[0]
jacB=beTa*(np.exp(zVals)/((1+np.exp(zVals))**2))



wBF=((2*np.pi)/beTa)*np.arange(-200,200)
gTarget=np.zeros(len(wBF),dtype=np.complex_)
gTarget=np.interp(wBF,wBE,a[:,0,0].real)

plt.plot(wBF,gTarget)
plt.show()
ftG=np.zeros(len(tVals),dtype=np.complex_)
for i in range(len(tVals)):
    ftG[i]=(1/beTa)*np.sum(np.exp(1j*tVals[i]*wBF)*gTarget)
plt.plot(tVals,ftG.real,'o-')
plt.plot(tVals,ftG.imag)
plt.show()
fInv=np.zeros(len(wBF),dtype=np.complex_)
for i in range(len(wBF)):
    fInv[i]=np.sum(zT*jacB*np.exp(-1j*tVals*wBF[i])*ftG)

plt.plot(wBF,fInv,'o-')
plt.plot(wBF,gTarget)
plt.show()

plt.plot(wBF,fInv.real/gTarget.real,'.-')
plt.show()
(wFX,wFG)=padeWeights(100,50)
print len(wFX)
wB=4*testRun.UnF.wB
wFO=wFX[wFX<=100]
wFX=np.append(-wFX[::-1],wFX)
wFG=np.append(wFG[::-1],wFG)


(wFi,wFXi)=np.meshgrid(wFO,wFX,indexing='ij')
wShape=wFi.shape
wFi=np.reshape(wFi,wFi.size)
wFXi=np.reshape(wFXi,wFXi.size)
wFGi=np.reshape(np.tile(wFG[np.newaxis,:],(len(wFO),1)),wFXi.size)

mixPP2=np.zeros(len(wB))
for i in range(len(wB)):
    intG=(wFG*np.exp(1j*wB[i]*0.01))/((1j*wFX+hF(wFX))*(1j*(wB[i]-wFX)+hF(wB[i]-wFX)))
    mixPP2[i]=(1/50.0)*np.sum(intG)
wMidI=np.append(-wB[:0:-1],wB)
mixPPI=np.append(mixPP2[:0:-1],mixPP2)
mixPPX=np.interp(wFi+wFXi,wMidI,mixPPI)

plt.plot(mixPPX,'.-')
plt.show()

mixPPF=-(1/50.0)*np.sum(np.reshape(mixPPX*np.exp(1j*wFXi*0.01)*(wFGi/(1j*wFXi+hF(wFXi))),wShape),axis=1).imag
plt.plot(wFO,mixPPF,'o-')
plt.plot(wFO,-0.25/wFO,'-x')
plt.show()

testRun=fRG0D(20,0.1,40.0,100.0,10,'litim')
testRun.initializeFlow(hF,uF,1)
(c,d)=testRun.propG.gBubbles(testRun.UnF.wB,0.0,10,1.0)

testRun=fRG0D(20,0.1,80.0,100.0,10,'litim')
testRun.initializeFlow(hF,uF,1)
(e,f)=testRun.propG.gBubbles(testRun.UnF.wB,0.0,10,1.0)

testRun=fRG0D(20,0.1,100.0,100.0,10,'litim')
testRun.initializeFlow(hF,uF,1)
(g,h)=testRun.propG.gBubbles(testRun.UnF.wB,0.0,10,1.0)

plt.plot(testRun.UnF.wB,b[:,0,0])
plt.plot(testRun.UnF.wB,d[:,0,0])
plt.plot(testRun.UnF.wB,f[:,0,0])
plt.plot(testRun.UnF.wB,h[:,0,0])
plt.show()

(c,s)=testRun.susFunctions()

#plt.plot(testRun.UnF.wB,testRun.UnF.UnPHE[:,0,0].real)
#plt.show()
#plt.plot(cayleyMap(testRun.UnF.wB,1.0),testRun.UnF.UnPHE[:,0,0].real)
#plt.show()
plt.plot(testRun.propG.wF,testRun.propG.sE.imag,'o-')
plt.show()
plt.plot(testRun.UnF.wB,c,'o-')
plt.show()

print c[0],(2/(2*np.pi))*np.trapz(np.transpose(c.real),testRun.UnF.wB)
print s[0],(2/(2*np.pi))*np.trapz(np.transpose(s.real),testRun.UnF.wB)
plt.plot(testRun.UnF.wB,s,'o-')
plt.show()
"""
